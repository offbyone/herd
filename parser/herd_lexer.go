// Code generated from Herd.g4 by ANTLR 4.7.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 14, 135,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 7, 3, 39, 10, 3, 12, 3, 14, 3, 42, 11, 3, 3, 4, 3, 4, 3, 4,
	3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 7,
	5, 7, 59, 10, 7, 3, 7, 6, 7, 62, 10, 7, 13, 7, 14, 7, 63, 3, 7, 3, 7, 6,
	7, 68, 10, 7, 13, 7, 14, 7, 69, 5, 7, 72, 10, 7, 3, 7, 6, 7, 75, 10, 7,
	13, 7, 14, 7, 76, 3, 8, 6, 8, 80, 10, 8, 13, 8, 14, 8, 81, 3, 9, 3, 9,
	6, 9, 86, 10, 9, 13, 9, 14, 9, 87, 3, 10, 6, 10, 91, 10, 10, 13, 10, 14,
	10, 92, 3, 11, 3, 11, 3, 12, 3, 12, 3, 12, 3, 12, 7, 12, 101, 10, 12, 12,
	12, 14, 12, 104, 11, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 7, 12, 111,
	10, 12, 12, 12, 14, 12, 114, 11, 12, 3, 12, 5, 12, 117, 10, 12, 3, 13,
	3, 13, 6, 13, 121, 10, 13, 13, 13, 14, 13, 122, 3, 14, 6, 14, 126, 10,
	14, 13, 14, 14, 14, 127, 3, 15, 3, 15, 5, 15, 132, 10, 15, 3, 15, 3, 15,
	2, 2, 16, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11,
	21, 12, 23, 13, 25, 2, 27, 2, 29, 14, 3, 2, 10, 3, 2, 12, 12, 3, 2, 50,
	59, 5, 2, 106, 106, 111, 111, 117, 117, 6, 2, 48, 48, 67, 92, 97, 97, 99,
	124, 7, 2, 48, 48, 50, 59, 67, 92, 97, 97, 99, 124, 7, 2, 44, 44, 47, 48,
	50, 59, 67, 92, 99, 124, 6, 2, 12, 12, 14, 15, 41, 41, 94, 94, 6, 2, 12,
	12, 14, 15, 36, 36, 94, 94, 2, 149, 2, 3, 3, 2, 2, 2, 2, 5, 3, 2, 2, 2,
	2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3, 2, 2, 2, 2, 13, 3, 2, 2,
	2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19, 3, 2, 2, 2, 2, 21, 3, 2,
	2, 2, 2, 23, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 3, 31, 3, 2, 2, 2, 5, 33, 3,
	2, 2, 2, 7, 43, 3, 2, 2, 2, 9, 47, 3, 2, 2, 2, 11, 51, 3, 2, 2, 2, 13,
	74, 3, 2, 2, 2, 15, 79, 3, 2, 2, 2, 17, 83, 3, 2, 2, 2, 19, 90, 3, 2, 2,
	2, 21, 94, 3, 2, 2, 2, 23, 116, 3, 2, 2, 2, 25, 118, 3, 2, 2, 2, 27, 125,
	3, 2, 2, 2, 29, 131, 3, 2, 2, 2, 31, 32, 7, 12, 2, 2, 32, 4, 3, 2, 2, 2,
	33, 34, 7, 116, 2, 2, 34, 35, 7, 119, 2, 2, 35, 36, 7, 112, 2, 2, 36, 40,
	3, 2, 2, 2, 37, 39, 10, 2, 2, 2, 38, 37, 3, 2, 2, 2, 39, 42, 3, 2, 2, 2,
	40, 38, 3, 2, 2, 2, 40, 41, 3, 2, 2, 2, 41, 6, 3, 2, 2, 2, 42, 40, 3, 2,
	2, 2, 43, 44, 7, 117, 2, 2, 44, 45, 7, 103, 2, 2, 45, 46, 7, 118, 2, 2,
	46, 8, 3, 2, 2, 2, 47, 48, 7, 99, 2, 2, 48, 49, 7, 102, 2, 2, 49, 50, 7,
	102, 2, 2, 50, 10, 3, 2, 2, 2, 51, 52, 7, 106, 2, 2, 52, 53, 7, 113, 2,
	2, 53, 54, 7, 117, 2, 2, 54, 55, 7, 118, 2, 2, 55, 56, 7, 117, 2, 2, 56,
	12, 3, 2, 2, 2, 57, 59, 7, 47, 2, 2, 58, 57, 3, 2, 2, 2, 58, 59, 3, 2,
	2, 2, 59, 61, 3, 2, 2, 2, 60, 62, 9, 3, 2, 2, 61, 60, 3, 2, 2, 2, 62, 63,
	3, 2, 2, 2, 63, 61, 3, 2, 2, 2, 63, 64, 3, 2, 2, 2, 64, 71, 3, 2, 2, 2,
	65, 67, 7, 48, 2, 2, 66, 68, 9, 3, 2, 2, 67, 66, 3, 2, 2, 2, 68, 69, 3,
	2, 2, 2, 69, 67, 3, 2, 2, 2, 69, 70, 3, 2, 2, 2, 70, 72, 3, 2, 2, 2, 71,
	65, 3, 2, 2, 2, 71, 72, 3, 2, 2, 2, 72, 73, 3, 2, 2, 2, 73, 75, 9, 4, 2,
	2, 74, 58, 3, 2, 2, 2, 75, 76, 3, 2, 2, 2, 76, 74, 3, 2, 2, 2, 76, 77,
	3, 2, 2, 2, 77, 14, 3, 2, 2, 2, 78, 80, 9, 3, 2, 2, 79, 78, 3, 2, 2, 2,
	80, 81, 3, 2, 2, 2, 81, 79, 3, 2, 2, 2, 81, 82, 3, 2, 2, 2, 82, 16, 3,
	2, 2, 2, 83, 85, 9, 5, 2, 2, 84, 86, 9, 6, 2, 2, 85, 84, 3, 2, 2, 2, 86,
	87, 3, 2, 2, 2, 87, 85, 3, 2, 2, 2, 87, 88, 3, 2, 2, 2, 88, 18, 3, 2, 2,
	2, 89, 91, 9, 7, 2, 2, 90, 89, 3, 2, 2, 2, 91, 92, 3, 2, 2, 2, 92, 90,
	3, 2, 2, 2, 92, 93, 3, 2, 2, 2, 93, 20, 3, 2, 2, 2, 94, 95, 7, 63, 2, 2,
	95, 22, 3, 2, 2, 2, 96, 102, 7, 41, 2, 2, 97, 98, 7, 94, 2, 2, 98, 101,
	11, 2, 2, 2, 99, 101, 10, 8, 2, 2, 100, 97, 3, 2, 2, 2, 100, 99, 3, 2,
	2, 2, 101, 104, 3, 2, 2, 2, 102, 100, 3, 2, 2, 2, 102, 103, 3, 2, 2, 2,
	103, 105, 3, 2, 2, 2, 104, 102, 3, 2, 2, 2, 105, 117, 7, 41, 2, 2, 106,
	112, 7, 36, 2, 2, 107, 108, 7, 94, 2, 2, 108, 111, 11, 2, 2, 2, 109, 111,
	10, 9, 2, 2, 110, 107, 3, 2, 2, 2, 110, 109, 3, 2, 2, 2, 111, 114, 3, 2,
	2, 2, 112, 110, 3, 2, 2, 2, 112, 113, 3, 2, 2, 2, 113, 115, 3, 2, 2, 2,
	114, 112, 3, 2, 2, 2, 115, 117, 7, 36, 2, 2, 116, 96, 3, 2, 2, 2, 116,
	106, 3, 2, 2, 2, 117, 24, 3, 2, 2, 2, 118, 120, 7, 37, 2, 2, 119, 121,
	10, 2, 2, 2, 120, 119, 3, 2, 2, 2, 121, 122, 3, 2, 2, 2, 122, 120, 3, 2,
	2, 2, 122, 123, 3, 2, 2, 2, 123, 26, 3, 2, 2, 2, 124, 126, 7, 34, 2, 2,
	125, 124, 3, 2, 2, 2, 126, 127, 3, 2, 2, 2, 127, 125, 3, 2, 2, 2, 127,
	128, 3, 2, 2, 2, 128, 28, 3, 2, 2, 2, 129, 132, 5, 27, 14, 2, 130, 132,
	5, 25, 13, 2, 131, 129, 3, 2, 2, 2, 131, 130, 3, 2, 2, 2, 132, 133, 3,
	2, 2, 2, 133, 134, 8, 15, 2, 2, 134, 30, 3, 2, 2, 2, 20, 2, 40, 58, 63,
	69, 71, 76, 81, 87, 92, 100, 102, 110, 112, 116, 122, 127, 131, 3, 8, 2,
	2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'\n'", "", "'set'", "'add'", "'hosts'", "", "", "", "", "'='",
}

var lexerSymbolicNames = []string{
	"", "", "RUN", "SET", "ADD", "HOSTS", "DURATION", "NUMBER", "IDENTIFIER",
	"GLOB", "EQUALS", "STRING", "SKIP_",
}

var lexerRuleNames = []string{
	"T__0", "RUN", "SET", "ADD", "HOSTS", "DURATION", "NUMBER", "IDENTIFIER",
	"GLOB", "EQUALS", "STRING", "COMMENT", "SPACES", "SKIP_",
}

type HerdLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewHerdLexer(input antlr.CharStream) *HerdLexer {

	l := new(HerdLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Herd.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// HerdLexer tokens.
const (
	HerdLexerT__0       = 1
	HerdLexerRUN        = 2
	HerdLexerSET        = 3
	HerdLexerADD        = 4
	HerdLexerHOSTS      = 5
	HerdLexerDURATION   = 6
	HerdLexerNUMBER     = 7
	HerdLexerIDENTIFIER = 8
	HerdLexerGLOB       = 9
	HerdLexerEQUALS     = 10
	HerdLexerSTRING     = 11
	HerdLexerSKIP_      = 12
)
