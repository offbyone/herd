// Code generated from Herd.g4 by ANTLR 4.7.2. DO NOT EDIT.

package parser

import (
	"fmt"
	"unicode"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import error
var _ = fmt.Printf
var _ = unicode.IsLetter

var serializedLexerAtn = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 2, 17, 163,
	8, 1, 4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7,
	9, 7, 4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12,
	4, 13, 9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4,
	18, 9, 18, 3, 2, 3, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 3, 45, 10, 3, 12,
	3, 14, 3, 48, 11, 3, 3, 4, 3, 4, 3, 4, 3, 4, 3, 5, 3, 5, 3, 5, 3, 5, 3,
	6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 6, 3, 7, 3, 7, 3, 7, 3, 7, 3, 7, 3,
	8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 8, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3, 9, 3,
	9, 3, 9, 3, 9, 3, 9, 3, 10, 5, 10, 87, 10, 10, 3, 10, 6, 10, 90, 10, 10,
	13, 10, 14, 10, 91, 3, 10, 3, 10, 6, 10, 96, 10, 10, 13, 10, 14, 10, 97,
	5, 10, 100, 10, 10, 3, 10, 6, 10, 103, 10, 10, 13, 10, 14, 10, 104, 3,
	11, 6, 11, 108, 10, 11, 13, 11, 14, 11, 109, 3, 12, 3, 12, 6, 12, 114,
	10, 12, 13, 12, 14, 12, 115, 3, 13, 6, 13, 119, 10, 13, 13, 13, 14, 13,
	120, 3, 14, 3, 14, 3, 15, 3, 15, 3, 15, 3, 15, 7, 15, 129, 10, 15, 12,
	15, 14, 15, 132, 11, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 7, 15, 139,
	10, 15, 12, 15, 14, 15, 142, 11, 15, 3, 15, 5, 15, 145, 10, 15, 3, 16,
	3, 16, 6, 16, 149, 10, 16, 13, 16, 14, 16, 150, 3, 17, 6, 17, 154, 10,
	17, 13, 17, 14, 17, 155, 3, 18, 3, 18, 5, 18, 160, 10, 18, 3, 18, 3, 18,
	2, 2, 19, 3, 3, 5, 4, 7, 5, 9, 6, 11, 7, 13, 8, 15, 9, 17, 10, 19, 11,
	21, 12, 23, 13, 25, 14, 27, 15, 29, 16, 31, 2, 33, 2, 35, 17, 3, 2, 10,
	3, 2, 12, 12, 3, 2, 50, 59, 5, 2, 106, 106, 111, 111, 117, 117, 6, 2, 48,
	48, 67, 92, 97, 97, 99, 124, 7, 2, 48, 48, 50, 59, 67, 92, 97, 97, 99,
	124, 7, 2, 44, 44, 47, 48, 50, 59, 67, 92, 99, 124, 6, 2, 12, 12, 14, 15,
	41, 41, 94, 94, 6, 2, 12, 12, 14, 15, 36, 36, 94, 94, 2, 177, 2, 3, 3,
	2, 2, 2, 2, 5, 3, 2, 2, 2, 2, 7, 3, 2, 2, 2, 2, 9, 3, 2, 2, 2, 2, 11, 3,
	2, 2, 2, 2, 13, 3, 2, 2, 2, 2, 15, 3, 2, 2, 2, 2, 17, 3, 2, 2, 2, 2, 19,
	3, 2, 2, 2, 2, 21, 3, 2, 2, 2, 2, 23, 3, 2, 2, 2, 2, 25, 3, 2, 2, 2, 2,
	27, 3, 2, 2, 2, 2, 29, 3, 2, 2, 2, 2, 35, 3, 2, 2, 2, 3, 37, 3, 2, 2, 2,
	5, 39, 3, 2, 2, 2, 7, 49, 3, 2, 2, 2, 9, 53, 3, 2, 2, 2, 11, 57, 3, 2,
	2, 2, 13, 64, 3, 2, 2, 2, 15, 69, 3, 2, 2, 2, 17, 75, 3, 2, 2, 2, 19, 102,
	3, 2, 2, 2, 21, 107, 3, 2, 2, 2, 23, 111, 3, 2, 2, 2, 25, 118, 3, 2, 2,
	2, 27, 122, 3, 2, 2, 2, 29, 144, 3, 2, 2, 2, 31, 146, 3, 2, 2, 2, 33, 153,
	3, 2, 2, 2, 35, 159, 3, 2, 2, 2, 37, 38, 7, 12, 2, 2, 38, 4, 3, 2, 2, 2,
	39, 40, 7, 116, 2, 2, 40, 41, 7, 119, 2, 2, 41, 42, 7, 112, 2, 2, 42, 46,
	3, 2, 2, 2, 43, 45, 10, 2, 2, 2, 44, 43, 3, 2, 2, 2, 45, 48, 3, 2, 2, 2,
	46, 44, 3, 2, 2, 2, 46, 47, 3, 2, 2, 2, 47, 6, 3, 2, 2, 2, 48, 46, 3, 2,
	2, 2, 49, 50, 7, 117, 2, 2, 50, 51, 7, 103, 2, 2, 51, 52, 7, 118, 2, 2,
	52, 8, 3, 2, 2, 2, 53, 54, 7, 99, 2, 2, 54, 55, 7, 102, 2, 2, 55, 56, 7,
	102, 2, 2, 56, 10, 3, 2, 2, 2, 57, 58, 7, 116, 2, 2, 58, 59, 7, 103, 2,
	2, 59, 60, 7, 111, 2, 2, 60, 61, 7, 113, 2, 2, 61, 62, 7, 120, 2, 2, 62,
	63, 7, 103, 2, 2, 63, 12, 3, 2, 2, 2, 64, 65, 7, 110, 2, 2, 65, 66, 7,
	107, 2, 2, 66, 67, 7, 117, 2, 2, 67, 68, 7, 118, 2, 2, 68, 14, 3, 2, 2,
	2, 69, 70, 7, 106, 2, 2, 70, 71, 7, 113, 2, 2, 71, 72, 7, 117, 2, 2, 72,
	73, 7, 118, 2, 2, 73, 74, 7, 117, 2, 2, 74, 16, 3, 2, 2, 2, 75, 76, 7,
	47, 2, 2, 76, 77, 7, 47, 2, 2, 77, 78, 7, 113, 2, 2, 78, 79, 7, 112, 2,
	2, 79, 80, 7, 103, 2, 2, 80, 81, 7, 110, 2, 2, 81, 82, 7, 107, 2, 2, 82,
	83, 7, 112, 2, 2, 83, 84, 7, 103, 2, 2, 84, 18, 3, 2, 2, 2, 85, 87, 7,
	47, 2, 2, 86, 85, 3, 2, 2, 2, 86, 87, 3, 2, 2, 2, 87, 89, 3, 2, 2, 2, 88,
	90, 9, 3, 2, 2, 89, 88, 3, 2, 2, 2, 90, 91, 3, 2, 2, 2, 91, 89, 3, 2, 2,
	2, 91, 92, 3, 2, 2, 2, 92, 99, 3, 2, 2, 2, 93, 95, 7, 48, 2, 2, 94, 96,
	9, 3, 2, 2, 95, 94, 3, 2, 2, 2, 96, 97, 3, 2, 2, 2, 97, 95, 3, 2, 2, 2,
	97, 98, 3, 2, 2, 2, 98, 100, 3, 2, 2, 2, 99, 93, 3, 2, 2, 2, 99, 100, 3,
	2, 2, 2, 100, 101, 3, 2, 2, 2, 101, 103, 9, 4, 2, 2, 102, 86, 3, 2, 2,
	2, 103, 104, 3, 2, 2, 2, 104, 102, 3, 2, 2, 2, 104, 105, 3, 2, 2, 2, 105,
	20, 3, 2, 2, 2, 106, 108, 9, 3, 2, 2, 107, 106, 3, 2, 2, 2, 108, 109, 3,
	2, 2, 2, 109, 107, 3, 2, 2, 2, 109, 110, 3, 2, 2, 2, 110, 22, 3, 2, 2,
	2, 111, 113, 9, 5, 2, 2, 112, 114, 9, 6, 2, 2, 113, 112, 3, 2, 2, 2, 114,
	115, 3, 2, 2, 2, 115, 113, 3, 2, 2, 2, 115, 116, 3, 2, 2, 2, 116, 24, 3,
	2, 2, 2, 117, 119, 9, 7, 2, 2, 118, 117, 3, 2, 2, 2, 119, 120, 3, 2, 2,
	2, 120, 118, 3, 2, 2, 2, 120, 121, 3, 2, 2, 2, 121, 26, 3, 2, 2, 2, 122,
	123, 7, 63, 2, 2, 123, 28, 3, 2, 2, 2, 124, 130, 7, 41, 2, 2, 125, 126,
	7, 94, 2, 2, 126, 129, 11, 2, 2, 2, 127, 129, 10, 8, 2, 2, 128, 125, 3,
	2, 2, 2, 128, 127, 3, 2, 2, 2, 129, 132, 3, 2, 2, 2, 130, 128, 3, 2, 2,
	2, 130, 131, 3, 2, 2, 2, 131, 133, 3, 2, 2, 2, 132, 130, 3, 2, 2, 2, 133,
	145, 7, 41, 2, 2, 134, 140, 7, 36, 2, 2, 135, 136, 7, 94, 2, 2, 136, 139,
	11, 2, 2, 2, 137, 139, 10, 9, 2, 2, 138, 135, 3, 2, 2, 2, 138, 137, 3,
	2, 2, 2, 139, 142, 3, 2, 2, 2, 140, 138, 3, 2, 2, 2, 140, 141, 3, 2, 2,
	2, 141, 143, 3, 2, 2, 2, 142, 140, 3, 2, 2, 2, 143, 145, 7, 36, 2, 2, 144,
	124, 3, 2, 2, 2, 144, 134, 3, 2, 2, 2, 145, 30, 3, 2, 2, 2, 146, 148, 7,
	37, 2, 2, 147, 149, 10, 2, 2, 2, 148, 147, 3, 2, 2, 2, 149, 150, 3, 2,
	2, 2, 150, 148, 3, 2, 2, 2, 150, 151, 3, 2, 2, 2, 151, 32, 3, 2, 2, 2,
	152, 154, 7, 34, 2, 2, 153, 152, 3, 2, 2, 2, 154, 155, 3, 2, 2, 2, 155,
	153, 3, 2, 2, 2, 155, 156, 3, 2, 2, 2, 156, 34, 3, 2, 2, 2, 157, 160, 5,
	33, 17, 2, 158, 160, 5, 31, 16, 2, 159, 157, 3, 2, 2, 2, 159, 158, 3, 2,
	2, 2, 160, 161, 3, 2, 2, 2, 161, 162, 8, 18, 2, 2, 162, 36, 3, 2, 2, 2,
	20, 2, 46, 86, 91, 97, 99, 104, 109, 115, 120, 128, 130, 138, 140, 144,
	150, 155, 159, 3, 8, 2, 2,
}

var lexerDeserializer = antlr.NewATNDeserializer(nil)
var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)

var lexerChannelNames = []string{
	"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
}

var lexerModeNames = []string{
	"DEFAULT_MODE",
}

var lexerLiteralNames = []string{
	"", "'\n'", "", "'set'", "'add'", "'remove'", "'list'", "'hosts'", "'--oneline'",
	"", "", "", "", "'='",
}

var lexerSymbolicNames = []string{
	"", "", "RUN", "SET", "ADD", "REMOVE", "LIST", "HOSTS", "ONELINE", "DURATION",
	"NUMBER", "IDENTIFIER", "GLOB", "EQUALS", "STRING", "SKIP_",
}

var lexerRuleNames = []string{
	"T__0", "RUN", "SET", "ADD", "REMOVE", "LIST", "HOSTS", "ONELINE", "DURATION",
	"NUMBER", "IDENTIFIER", "GLOB", "EQUALS", "STRING", "COMMENT", "SPACES",
	"SKIP_",
}

type HerdLexer struct {
	*antlr.BaseLexer
	channelNames []string
	modeNames    []string
	// TODO: EOF string
}

var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))

func init() {
	for index, ds := range lexerAtn.DecisionToState {
		lexerDecisionToDFA[index] = antlr.NewDFA(ds, index)
	}
}

func NewHerdLexer(input antlr.CharStream) *HerdLexer {

	l := new(HerdLexer)

	l.BaseLexer = antlr.NewBaseLexer(input)
	l.Interpreter = antlr.NewLexerATNSimulator(l, lexerAtn, lexerDecisionToDFA, antlr.NewPredictionContextCache())

	l.channelNames = lexerChannelNames
	l.modeNames = lexerModeNames
	l.RuleNames = lexerRuleNames
	l.LiteralNames = lexerLiteralNames
	l.SymbolicNames = lexerSymbolicNames
	l.GrammarFileName = "Herd.g4"
	// TODO: l.EOF = antlr.TokenEOF

	return l
}

// HerdLexer tokens.
const (
	HerdLexerT__0       = 1
	HerdLexerRUN        = 2
	HerdLexerSET        = 3
	HerdLexerADD        = 4
	HerdLexerREMOVE     = 5
	HerdLexerLIST       = 6
	HerdLexerHOSTS      = 7
	HerdLexerONELINE    = 8
	HerdLexerDURATION   = 9
	HerdLexerNUMBER     = 10
	HerdLexerIDENTIFIER = 11
	HerdLexerGLOB       = 12
	HerdLexerEQUALS     = 13
	HerdLexerSTRING     = 14
	HerdLexerSKIP_      = 15
)
